// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-collection@v0.1.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.1.0-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-read-only-property@v0.1.1-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-count-by@v0.1.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-keys@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-ranks@v0.1.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-pow@v0.1.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-chisquare-cdf@v0.1.0-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-identity-function@v0.1.1-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-incrspace@v0.1.0-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-array@v0.1.1-esm/index.mjs";import{isPrimitive as h}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@v0.1.1-esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@v0.1.1-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.1.1-esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@v0.1.0-esm/index.mjs";import{isPrimitive as j}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.1.1-esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-roundn@v0.1.0-esm/index.mjs";function c(t,e){return s(e)?g(e,"alpha")&&(t.alpha=e.alpha,!h(t.alpha)||u(t.alpha))?new TypeError(p("invalid option. `%s` option must be a number. Option: `%s`.","alpha",t.alpha)):g(e,"groups")&&(t.groups=e.groups,!m(t.groups))?new TypeError(p("invalid option. `%s` option must be an array. Option: `%s`.","groups",t.groups)):null:new TypeError(p("invalid argument. Options argument must be an object. Value: `%s`.",e))}function b(t){var e,i,r;if(i=4,e=!0,arguments.length>0){if(!s(t))throw new TypeError(p("invalid argument. First argument must be an object. Value: `%s`.",t));if(g(t,"digits")){if(!v(t.digits))throw new TypeError(p("invalid option. `%s` option must be a positive integer. Option: `%s`.","digits",t.digits));i=t.digits}if(g(t,"decision")){if(!j(t.decision))throw new TypeError(p("invalid option. `%s` option must be a boolean. Option: `%s`.","decision",t.decision));e=t.decision}}return r="",r+=this.method,r+="\n\n",r+="Null hypothesis: the medians of all groups are the same",r+="\n\n",r+="    pValue: "+f(this.pValue,-i)+"\n",r+="    statistic: "+f(this.statistic,-i),r+="    df: "+this.df,r+="\n\n",e&&(r+="Test Decision: ",this.rejected?r+="Reject null in favor of alternative at "+100*this.alpha+"% significance level":r+="Fail to reject null in favor of alternative at "+100*this.alpha+"% significance level",r+="\n"),r}function w(){var m,h,u,g,v,j,f,w,y,x,E,T,V,O,k,F,R,q,M,D,I,K,N,P;if(E={},s(arguments[(g=arguments.length)-1])&&(v=arguments[g-1],g-=1,F=c(E,v)))throw F;if(h={},I={},E.groups){if((N=arguments[0]).length!==E.groups.length)throw new RangeError(p("invalid arguments. First argument and `%s` must be arrays having the same length.","opts.groups"));for(I=i(E.groups,l),g=(j=r(I)).length,M=0;M<g;M++)h[R=j[M]]=0;if(g<2)throw new Error(p("invalid option. `%s` option must be an array containing at least two unique elements. Option: `%s`.","groups",j));m=E.groups}else{if(N=[],m=[],g<2)throw new Error(p("invalid invocation. Incorrect number of arguments. Must provide at least two array-like arguments. Value: `%s`.",k));for(M=0;M<g;M++){if(!t(k=arguments[M]))throw new TypeError(p("invalid argument. Must provide array-like arguments. Value: `%s`.",k));if(0===k.length)throw new Error(p("invalid argument. Supplied arrays cannot be empty. Value: `%s`.",k));for(I[M]=k.length,h[M]=0,D=0;D<I[M];D++)m.push(M),N.push(k[D])}j=d(0,g,1)}if((f=void 0===E.alpha?.05:E.alpha)<0||f>1)throw new RangeError(p("invalid option. `%s` must be a number on the interval: [0, 1]. Value: `%f`.","alpha",f));for(K=N.length,y=n(N),O={},M=0;M<K;M++)h[m[M]]+=y[M],N[M]in O?O[N[M]]+=1:O[N[M]]=1;for(V=0,M=0;M<g;M++)R=j[M],V+=o(h[R],2)/I[R];for(V=12/(K*(K+1))*V-3*(K+1),u=0,x=r(O),M=0;M<x.length;M++)P=O[x[M]],u+=o(P,3)-P;return V/=1-u/(o(K,3)-K),T=1-a(V,w=g-1),e(q={},"rejected",T<=f),e(q,"alpha",f),e(q,"df",w),e(q,"pValue",T),e(q,"statistic",V),e(q,"method","Kruskal-Wallis Test"),e(q,"print",b),q}export{w as default};
//# sourceMappingURL=index.mjs.map
