{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/print.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: the medians of all groups are the same';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts );\n\tstr += '    df: ' + this.df;\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar countBy = require( '@stdlib/utils-count-by' );\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar rank = require( '@stdlib/stats-ranks' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar chisqCDF = require( '@stdlib/stats-base-dists-chisquare-cdf' );\nvar identity = require( '@stdlib/utils-identity-function' );\nvar incrspace = require( '@stdlib/array-base-incrspace' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes the Kruskal-Wallis test for equality of medians.\n*\n* @param {...NumberArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} must provide array-like arguments\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = kruskal( x, y, z );\n* // returns {...}\n*/\nfunction kruskal() {\n\tvar groupsIndicators;\n\tvar groupRankSums;\n\tvar tieSumTerm;\n\tvar ngroups;\n\tvar options;\n\tvar levels;\n\tvar alpha;\n\tvar param;\n\tvar ranks;\n\tvar vals;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar ties;\n\tvar arg;\n\tvar err;\n\tvar key;\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar n;\n\tvar N;\n\tvar x;\n\tvar v;\n\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tgroupRankSums = {};\n\tn = {};\n\tif ( opts.groups ) {\n\t\tx = arguments[ 0 ];\n\t\tif ( x.length !== opts.groups.length ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. First argument and `%s` must be arrays of the same length.', 'opts.groups' ) );\n\t\t}\n\t\tn = countBy( opts.groups, identity );\n\t\tlevels = objectKeys( n );\n\t\tngroups = levels.length;\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\tkey = levels[ i ];\n\t\t\tgroupRankSums[ key ] = 0;\n\t\t}\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid number of groups. `%s` array must contain at least two unique elements. Value: `%s`.', 'groups', levels ) );\n\t\t}\n\t\tgroupsIndicators = opts.groups;\n\t} else {\n\t\tx = [];\n\t\tgroupsIndicators = [];\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid number of input arguments. Must provide at least two array-like arguments. Value: `%s`.', arg ) );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targ = arguments[ i ];\n\t\t\tif ( !isCollection( arg ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide array-like arguments. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\tif ( arg.length === 0 ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Supplied arrays cannot be empty. Value: `%s`.', arg ) );\n\t\t\t} else {\n\t\t\t\tn[ i ] = arg.length;\n\t\t\t}\n\t\t\tgroupRankSums[ i ] = 0;\n\t\t\tfor ( j = 0; j < n[ i ]; j++ ) {\n\t\t\t\tgroupsIndicators.push( i );\n\t\t\t\tx.push( arg[ j ] );\n\t\t\t}\n\t\t}\n\t\tlevels = incrspace( 0, ngroups, 1 );\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` must be a number in the range 0 to 1. Value: `%f`.', 'alpha', alpha ) );\n\t}\n\n\tN = x.length;\n\tranks = rank( x );\n\n\t// Calculate # ties for each value & rank sums per group:\n\tties = {};\n\tfor ( i = 0; i < N; i++ ) {\n\t\tgroupRankSums[ groupsIndicators[ i ] ] += ranks[ i ];\n\t\tif ( x[ i ] in ties ) {\n\t\t\tties[ x[ i ] ] += 1;\n\t\t} else {\n\t\t\tties[ x[ i ] ] = 1;\n\t\t}\n\t}\n\n\t// Calculate test statistic using short-cut formula:\n\tstat = 0.0;\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\tkey = levels[ i ];\n\t\tstat += pow( groupRankSums[ key ], 2.0 ) / n[ key ];\n\t}\n\tstat = ( ( 12.0 / ( N * (N+1) ) ) * stat ) - ( 3.0 * (N+1) );\n\n\t// Correction for ties:\n\ttieSumTerm = 0;\n\tvals = objectKeys( ties );\n\tfor ( i = 0; i < vals.length; i++ ) {\n\t\tv = ties[ vals[ i ] ];\n\t\ttieSumTerm += pow( v, 3.0 ) - v;\n\t}\n\n\tstat /= 1.0 - ( ( tieSumTerm ) / ( pow( N, 3 ) - N ) );\n\tparam = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, param );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'df', param );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Kruskal-Wallis Test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = kruskal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the Kruskal-Wallis test for equal medians.\n*\n* @module @stdlib/stats-kruskal-test\n*\n* @example\n* var kruskalTest = require( '@stdlib/stats-kruskal-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = kruskalTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar kruskalTest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = kruskalTest;\n"],"names":["isArray","require$$0","isNumber","require$$1","isPrimitive","isObject","require$$2","isnan","require$$3","hasOwnProp","require$$4","format","require$$5","validate_1","opts","options","alpha","TypeError","groups","isPositiveInteger","isBoolean","roundn","isCollection","isPlainObject","setReadOnly","countBy","objectKeys","rank","pow","require$$6","chisqCDF","require$$7","identity","require$$8","incrspace","require$$9","require$$10","validate","require$$11","print","decision","dgts","str","arguments","length","digits","this","method","pValue","statistic","df","rejected","lib","groupsIndicators","groupRankSums","tieSumTerm","ngroups","levels","param","ranks","vals","pval","stat","ties","arg","err","key","out","i","j","n","N","x","v","RangeError","Error","push"],"mappings":"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"}