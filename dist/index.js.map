{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/print.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: the medians of all groups are the same';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts );\n\tstr += '    df: ' + this.df;\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar countBy = require( '@stdlib/utils-count-by' );\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar rank = require( '@stdlib/stats-ranks' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar chisqCDF = require( '@stdlib/stats-base-dists-chisquare-cdf' );\nvar identity = require( '@stdlib/utils-identity-function' );\nvar incrspace = require( '@stdlib/array-base-incrspace' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes the Kruskal-Wallis test for equality of medians.\n*\n* @param {...NumberArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} must provide array-like arguments\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = kruskal( x, y, z );\n* // returns {...}\n*/\nfunction kruskal() {\n\tvar groupsIndicators;\n\tvar groupRankSums;\n\tvar tieSumTerm;\n\tvar ngroups;\n\tvar options;\n\tvar levels;\n\tvar alpha;\n\tvar param;\n\tvar ranks;\n\tvar vals;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar ties;\n\tvar arg;\n\tvar err;\n\tvar key;\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar n;\n\tvar N;\n\tvar x;\n\tvar v;\n\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tgroupRankSums = {};\n\tn = {};\n\tif ( opts.groups ) {\n\t\tx = arguments[ 0 ];\n\t\tif ( x.length !== opts.groups.length ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. First argument and `%s` must be arrays having the same length.', 'opts.groups' ) );\n\t\t}\n\t\tn = countBy( opts.groups, identity );\n\t\tlevels = objectKeys( n );\n\t\tngroups = levels.length;\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\tkey = levels[ i ];\n\t\t\tgroupRankSums[ key ] = 0;\n\t\t}\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid option. `%s` option must be an array containing at least two unique elements. Option: `%s`.', 'groups', levels ) );\n\t\t}\n\t\tgroupsIndicators = opts.groups;\n\t} else {\n\t\tx = [];\n\t\tgroupsIndicators = [];\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid invocation. Incorrect number of arguments. Must provide at least two array-like arguments. Value: `%s`.', arg ) );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targ = arguments[ i ];\n\t\t\tif ( !isCollection( arg ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide array-like arguments. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\tif ( arg.length === 0 ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Supplied arrays cannot be empty. Value: `%s`.', arg ) );\n\t\t\t} else {\n\t\t\t\tn[ i ] = arg.length;\n\t\t\t}\n\t\t\tgroupRankSums[ i ] = 0;\n\t\t\tfor ( j = 0; j < n[ i ]; j++ ) {\n\t\t\t\tgroupsIndicators.push( i );\n\t\t\t\tx.push( arg[ j ] );\n\t\t\t}\n\t\t}\n\t\tlevels = incrspace( 0, ngroups, 1 );\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` must be a number on the interval: [0, 1]. Value: `%f`.', 'alpha', alpha ) );\n\t}\n\n\tN = x.length;\n\tranks = rank( x );\n\n\t// Calculate # ties for each value & rank sums per group:\n\tties = {};\n\tfor ( i = 0; i < N; i++ ) {\n\t\tgroupRankSums[ groupsIndicators[ i ] ] += ranks[ i ];\n\t\tif ( x[ i ] in ties ) {\n\t\t\tties[ x[ i ] ] += 1;\n\t\t} else {\n\t\t\tties[ x[ i ] ] = 1;\n\t\t}\n\t}\n\n\t// Calculate test statistic using short-cut formula:\n\tstat = 0.0;\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\tkey = levels[ i ];\n\t\tstat += pow( groupRankSums[ key ], 2.0 ) / n[ key ];\n\t}\n\tstat = ( ( 12.0 / ( N * (N+1) ) ) * stat ) - ( 3.0 * (N+1) );\n\n\t// Correction for ties:\n\ttieSumTerm = 0;\n\tvals = objectKeys( ties );\n\tfor ( i = 0; i < vals.length; i++ ) {\n\t\tv = ties[ vals[ i ] ];\n\t\ttieSumTerm += pow( v, 3.0 ) - v;\n\t}\n\n\tstat /= 1.0 - ( ( tieSumTerm ) / ( pow( N, 3 ) - N ) );\n\tparam = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, param );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'df', param );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Kruskal-Wallis Test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = kruskal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the Kruskal-Wallis test for equal medians.\n*\n* @module @stdlib/stats-kruskal-test\n*\n* @example\n* var kruskalTest = require( '@stdlib/stats-kruskal-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = kruskalTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isArray", "isNumber", "isObject", "isnan", "hasOwnProp", "format", "validate", "opts", "options", "require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "format", "print", "opts", "decision", "dgts", "str", "require_main", "__commonJSMin", "exports", "module", "isCollection", "isPlainObject", "setReadOnly", "countBy", "objectKeys", "rank", "pow", "chisqCDF", "identity", "incrspace", "format", "validate", "print", "kruskal", "groupsIndicators", "groupRankSums", "tieSumTerm", "ngroups", "options", "levels", "alpha", "param", "ranks", "vals", "opts", "pval", "stat", "ties", "arg", "err", "key", "out", "i", "j", "n", "N", "x", "v", "main"]
}
